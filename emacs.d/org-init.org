* Init
This is our initialisation script. This basically sets MELPA packages and ensures that user-package is installed
on first install. On first install it's worth setting:
#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))

  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (setq custom-file "~/.emacs.d/custom-settings.el")
  (load custom-file t)
  (server-start)
#+END_SRC
* General
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (global-set-key (kbd "<f12>") 'shell)
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (global-set-key (kbd "s-p") 'counsel-M-x)
  (add-hook 'dired-mode-hook
   (lambda ()
    (define-key dired-mode-map (kbd "^")
      (lambda () (interactive) (find-alternate-file "..")))))
#+END_SRC
* Personal Information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Clint Ryan"
        user-mail-address "")
#+END_SRC
* Interface
Just some nice user interfaces tweaks. Bread and butter stuff!
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config
    (load-theme 'zenburn))
  (scroll-bar-mode -1)
  (unless (memq window-system '(mac ns))
    (menu-bar-mode -1))
  (setq inhibit-startup-message t)
  (setq-default indent-tabs-mode nil)
  (setq-default line-spacing 5)
  (setq ring-bell-function 'ignore)
  (xterm-mouse-mode 1)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode t)
    (setq company-tooltip-align-annotations t))
#+END_SRC
* Evil
Evil complements the emacs ecosystem perfectly. The first thing I do is get this set up!
It's super important to have the leader keymap as well, so that I can perform all my combinations super fast.
A lot of these keybindings have been heavily influenced from spacemacs.
I like to throw in magit support and surround support too.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode 1)
    (setq evil-want-C-u-scroll t))

  (use-package evil-leader
    :after evil
    :config
    (evil-leader/set-leader "SPC")
    (evil-leader/set-key
     "SPC" 'counsel-M-x
     "[" 'previous-error
     "]" 'next-error
     "bb" 'ivy-switch-buffer
     "bl" 'dired
     "bd" 'kill-buffer
     "bk" 'kill-this-buffer
     "bD" 'kill-other-buffers
     "bn" 'next-buffer
     "bp" 'previous-buffer
     "eb" 'eval-buffer
     "er" 'eval-region
     "fs" 'save-buffer
     "fj" 'open-journal-file
     "fo" 'open-org-file
     "fc" 'open-calendar-file
     "ff" 'counsel-find-file
     "fr" 'counsel-recentf
     "fed" 'open-config-file
     "feR" 'reload-config-file
     "ft" 'neotree-toggle
     "gs" 'magit-status
     "mf" 'tide-jump-to-definition
     "mb" 'tide-jump-back
     "pf" 'projectile-find-file
     "pp" 'projectile-switch-project
     "pb" 'projectile-switch-buffer
     "pt" 'neotree-find-project-root
     "sg" 'counsel-git-grep
     "tl" 'toggle-truncate-lines
     "qc" 'delete-frame
     "qq" 'save-buffers-kill-terminal
     "wc" 'evil-window-delete
     "ww" 'ace-window
     "wo" 'delete-other-windows
     "wj" 'evil-window-down
     "wk" 'evil-window-up
     "wh" 'evil-window-left
     "wl" 'evil-window-right
     "wv" 'evil-window-vsplit
     "ws" 'evil-window-split)
    (global-evil-leader-mode))
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode))
#+END_SRC
* Expand Region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+END_SRC
* FlyCheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (setq-default flycheck-disabled-checker 'javascript-jshint)
    (setq-default flycheck-disabled-checker 'json-jsonlist)
    (setq-default flycheck-disabled-checker 'javascript-eslint)
    (setq-default flycheck-javascript-eslint-executable "eslint-project-relative")
    (flycheck-add-mode 'javascript-eslint 'web-mode)

    (defun my/use-eslint-from-node-modules ()
      (let* ((root (locate-dominating-file
      (or (buffer-file-name) default-directory)
        "node_modules"))
        (eslint (and root
        (expand-file-name "node_modules/eslint/bin/eslint.js"
          root))))
        (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))
    (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
    (global-flycheck-mode)
  )
#+END_SRC
* Mac specific
OSX fix for eslint lookup
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
    (use-package exec-path-from-shell
      :ensure t
      :config
      (exec-path-from-shell-initialize))
    (defun copy-from-osx ()
      :interactive
      (shell-command-to-string "pbpaste"))
    (defun paste-to-osx (text &optional push)
      :interactive
      (let ((process-connection-type nil))
        (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
          (process-send-string proc text)
          (process-send-eof proc)))))
#+END_SRC
* Helper Functions
#+BEGIN_SRC emacs-lisp
  (defun neotree-find-project-root()
    (interactive)
    (if (neo-global--window-exists-p)
        (neotree-hide)
      (let ((origin-buffer-file-name (buffer-file-name)))
        (neotree-find (projectile-project-root))
        (neotree-find origin-buffer-file-name))))

  (defun reload-config-file()
    (interactive)
    (org-babel-load-file "~/.emacs.d/org-init.org"))

  (defun open-config-file()
    (interactive)
    (find-file "~/.emacs.d/org-init.org"))

  (defun open-org-file()
    (interactive)
    (find-file "~/Dropbox/notes/gtd.org"))

  (defun open-journal-file()
    (interactive)
    (find-file "~/Dropbox/notes/journal.org"))

  (defun open-calendar-file()
    (interactive)
    (find-file "~/Dropbox/notes/calendar.org"))

  (defun kill-other-buffers (&optional arg)
    "Kill all other buffers.
  If the universal prefix argument is used then will the windows too."
    (interactive "P")
    (when (yes-or-no-p (format "Killing all buffers except \"%s\"? "
                               (buffer-name)))
      (mapc 'kill-buffer (delq (current-buffer) (buffer-list)))
      (when (equal '(4) arg) (delete-other-windows))
      (message "Buffers deleted!")))

#+END_SRC
* Ivy/Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind ("C-s" . swiper))
  (setq ivy-use-virtual-buffers t)
  (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
#+END_SRC
* Code
Our favourite languages!
** C#
#+BEGIN_SRC emacs-lisp
  (use-package omnisharp
    :commands csharp-mode
    :config
    (add-to-list 'company-backends 'company-omnisharp))
#+END_SRC
** Javascript
Everybody uses JSON now, this make things look very pretty
#+BEGIN_SRC emacs-lisp
  (use-package json-mode)
#+END_SRC
RJSX mode inherits js2-mode and supports jsx well. In my experience it's better than js2-jsx-mode, so I use it instead.
We set basic offsets and also unmap vim C-d in insert mode, so that we can use the nice tag completion
We also integrate with Tide here, so that we can jump back and forth across definitions
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :config
    (setq js2-basic-offset 2)
    (setq typescript-indent-level 2)
    (define-key evil-insert-state-map (kbd "C-d") nil)
    (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode)))
#+END_SRC
Tide mode utilises Microsoft's excellent typescript tooling. Tide mode provides excellent code completion, formatting and syntax checking.
#+BEGIN_SRC emacs-lisp
  (defun setup-tide-mode ()
    "Set up Tide mode."
    (interactive)
    (tide-setup)
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1))
  (use-package tide
    :ensure t
    :config
    (setq company-tooltip-align-annotations t)
    (add-hook 'rjsx-mode-hook #'setup-tide-mode))
#+END_SRC
** Rust
 #+BEGIN_SRC emacs-lisp
   (use-package rust-mode
     :mode ("\\.rs\\'" . rust-mode))
 #+END_SRC
 Let flycheck hook into rust tooling
 #+BEGIN_SRC emacs-lisp
   (use-package flycheck-rust
     :commands (rust-mode))
 #+END_SRC
 Autocompletion for rust. I love how new languages provide tooling like this that are editor agnostic.
 #+BEGIN_SRC emacs-lisp
   (use-package racer
     :commands (rust-mode)
     :config
     (evil-define-key 'insert rust-mode-map
       (kbd "TAB") 'company-indent-or-complete-common)
     (add-hook 'rust-mode-hook #'racer-mode)
     (add-hook 'racer-mode-hook #'eldoc-mode))
 #+END_SRC
** CSS
#+BEGIN_SRC emacs-lisp
  (setq css-indent-offset 2)
#+END_SRC
** Yaml
Let's get all our yamls in order
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC
** Web
Bread and butter web-mode. Highlighting for all things html/css
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :config
  (defun my-web-mode-hook ()
  "Hooks for Web mode. Adjust indents"
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-attr-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq css-indent-offset 2))
  (add-to-list 'auto-mode-alist '("\\.cshtml\\'" . web-mode))
  (add-hook 'web-mode-hook  'my-web-mode-hook))
#+END_SRC
* Magit
Magit is quite magical. I'm a huge fan of shelling out to command line when possible, but magit is a lot more intuitive, helpful and efficient.
Combined with evil-magit and this is my favourite way of doing version control.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands magit-status)
  (use-package evil-magit
    :after magit)
#+END_SRC
* Markdown
I try to use org files where possible, but markdown is super useful sometimes for projects. You can install live export tools as well, but I tend not to.
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
   :config
   (setq-default markdown-split-window-direction 'right))
#+END_SRC
* NeoTree
We need an evil tree! Coupled with some major mode evil bindings and we're in action
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :commands (neotree-toggle neotree-find-project-root)
  :config
  (evil-define-key 'normal neotree-mode-map
    (kbd "TAB") 'neotree-enter
    "H" 'neotree-hidden-file-toggle
    "i" 'neotree-enter-horizontal-split
    "s" 'neotree-enter-vertical-split
    "q" 'neotree-hide
    (kbd "RET") 'neotree-enter)

  (evil-leader/set-key-for-mode 'neotree-mode
    "mo" 'neotree-open-file-in-system-application
    "md" 'neotree-delete-node
    "mr" 'neotree-rename-node
    "mc" 'neotree-create-node)

  (setq neo-theme 'nerd)
  (setq neo-window-fixed-size nil)
  (setq neo-smart-open t))
  (setq neo-window-width 40)
  (setq neo-default-system-application "open")
#+END_SRC
* Org
Org mode is an extremely productive way of organising your text files. I have org mode setup in basically a few files:
 - GTD.org
 - Calendar.org

We use org-capture to easily capture events, ideas and todo items without context switching from what I'm doing.
I also use gcal.el to organise and synchronise with my google calendar. I generally will create an event in google calendar, or from within emacs (and sync).
Then I'll create a link from my ~calendar.org~ file to my ~gtd.org~ file with a TODO item against it and the schedule.

A better way might be to just use org-agenda and use the calendar file as well, but I'll probably experiment with it a little before doing that.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :mode ("\\.org\\'" . org-mode)
    :init
    (evil-leader/set-key
      "oc" 'org-capture
      "oa" 'org-agenda
      "os" 'org-schedule)

    (evil-leader/set-key-for-mode 'org-mode
      "mt" 'org-set-tags-command
      "md" 'org-deadline
      "me" 'org-set-effort
      "mn" 'org-narrow-to-subtree
      "mr" 'org-refile
      "mss" 'org-store-link
      "msp" 'org-insert-last-stored-link
      "mw" 'widen)

    (evil-define-key 'normal org-mode-map
      ">" 'org-shiftmetaright
      "<" 'org-shiftmetaleft
      "c" 'org-toggle-checkbox
      "t" 'org-todo
      (kbd "TAB") 'org-cycle
      "gs" 'org-goto)

    (evil-leader/set-key-for-mode 'org-capture-mode
      "c" 'org-capture-finalize
      "k" 'org-capture-kill)
    :config
    (setq org-use-speed-commands t)
    (setq org-directory "~/Dropbox/notes")
    (setq org-default-notes-file (concat org-directory "/gtd.org"))
    (define-key global-map "\C-cc" 'org-capture)
    (setq org-global-properties '(("Effort_ALL". "0 0:10 0:20 0:30 1:00 2:00 3:00 4:00 6:00 8:00")))
    (setq org-columns-default-format '"%25ITEM %10Effort(Est){+} %TODO %TAGS")
    (org-agenda-files '"~/Dropbox/notes/gtd.org")
    (setq org-tag-alist
          '((:startgroup . nil)
            (:endgroup . nil)
            ("WORK" . ?w) ("HOME" . ?h) ("COMPUTER" . ?l) ("GOALS" . ?g) ("READING" . ?r) ("PROJECT" . ?p)))
    (setq org-agenda-custom-commands
          '(("g" . "GTD contexts")
            ("gw" "Work" tags-todo "WORK")
            ("gc" "Computer" tags-todo "COMPUTER")
            ("gg" "Goals" tags-todo "GOALS")
            ("gh" "Home" tags-todo "HOME")
            ("gt" "Tasks" tags-todo "TASKS")
            ("G" "GTD Block Agenda"
             ((tags-todo "WORK")
              (tags-todo "COMPUTER")
              (tags-todo "GOALS")
              (tags-todo "TASKS"))
             nil)))
    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "~/Dropbox/notes/gtd.org" "Inbox")
             "* TODO %?\n%T" :prepend T)
            ("e" "Event" entry (file "~/Dropbox/notes/calendar.org")
             "* %?\n%T" :prepend T)
            ("i" "Ideas" entry (file+headline "~/Dropbox/notes/gtd.org" "Ideas")
             "* %?\n%T" :prepend T)
            ("g" "Goals" entry (file+headline "~/Dropbox/notes/gtd.org" "Goals")
             "* %?\n%T" :prepend T)
            ("j" "Journal" entry (file+datetree "~/Dropbox/notes/journal.org")
             "* %?\nEntered on %U\n  %i\n  %a"))))
#+END_SRC
Setup google calendar sync. I keep a secrets file in my Dropbox that I load here as well. Secrets file contains a few variables for secrets and client tokens
#+BEGIN_SRC emacs-lisp
  (use-package org-gcal
    :after org
    :config
    (load-file "~/Dropbox/Keys/gcal.el")
    (setq org-gcal-client-id my/google-secrets-client
        org-gcal-client-secret my/google-secrets-secret
        org-gcal-file-alist '(("clint.ryan3@gmail.com" .  "~/Dropbox/notes/calendar.org")))
  )
#+END_SRC
Org presentation software
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
  (use-package ox-reveal
    :ensure t
    :config
    (setq org-reveal-title-slide nil)
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/"))
#+END_SRC
* Projectile
Projectile is awesome for searching and handling projects.
I ignore ~node_modules~ naturally and also have some evil bindings for easily accessing projects using leader keys
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :commands (projectile-switch-project projectile-switch-buffer)
    :config
    (setq projectile-completion-system 'ivy)
    (add-to-list 'projectile-globally-ignored-directories "node_modules")
    (projectile-global-mode))
  #+END_SRC
* Smart Parenthesis
  Hightlight parens smartly :P
  #+BEGIN_SRC emacs-lisp
(use-package smartparens)
  #+END_SRC
* Snippets
  YaSnippet allows us to insert snippets easily. We disable the <TAB> completion because we use that for other things, but we can insert snippets still using leader bindings.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :commands (yas-insert-snippet)
    :init
    (evil-leader/set-key
     "is" 'yas-insert-snippet
     "in" 'yas-new-snippet)
    :config
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (yas-global-mode 1))
  #+END_SRC
* Which Key
  Awesome package for key discovery!
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

