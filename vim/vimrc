" Install packages and configuration
call plug#begin()
Plug 'tpope/vim-surround' " The Pope's gift to man
Plug 'morhetz/gruvbox'
Plug 'rakr/vim-one'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'arcticicestudio/nord-vim', { 'branch': 'develop' }
Plug 'preservim/nerdtree' " We want that tree action
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'pangloss/vim-javascript', { 'for': 'javascript' } " Javascript support
Plug 'leafgarland/typescript-vim' " Typescript lang
Plug 'ianks/vim-tsx'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'vim-ruby/vim-ruby' " Ruby support
Plug 'fatih/vim-go'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'scrooloose/nerdcommenter' " Comment lines
Plug 'junegunn/fzf' " Searching, need to install fzf first
Plug 'junegunn/fzf.vim' " Fzf plugin to interact with cmd tool
Plug 'aklt/plantuml-syntax'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
Plug 'junegunn/vim-easy-align'
Plug 'vim-scripts/nginx.vim'
Plug 'qpkorr/vim-bufkill'

call plug#end()

" Settings
let mapleader = " "
set clipboard+=unnamedplus
set completeopt=menu,preview,longest,noinsert
set modelines=0
set history=500
set autoread
set showmatch
set splitbelow splitright
set mouse=a

if !has('nvim')
	set ttymouse=xterm2
endif

" User Interface
set colorcolumn=120
set cursorline
set title
set number
set lazyredraw
set signcolumn=yes
set hidden
set showmode
set updatetime=300
set shortmess+=c

if has("gui_running")
  set guioptions-=m " no menu
  set guioptions-=T " no toolbar
  set guioptions-=r " no scrollbar on the right
  set guioptions-=L " no scrollbar on the right
  set guioptions-=b " no scrollbar on the bottom
endif

if (has("termguicolors"))
  set termguicolors
endif

syntax on
set bg=dark

"General UI

" Files and Backups
set writebackup
set noswapfile
set backupdir=.,/tmp
set undodir=~/.vim/.tmp,~/tmp,~/.tmp,/tmp
set wildignore=.svn,CVS,.git,*.swp,*.jpg,*.png,*.gif,*.pdf,*.bak

set suffixes+=.bak
set undofile

" Text Formatting
set smartcase
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set ignorecase
set hlsearch
set nowrap

" Keybindings

" General Keybindings
map <leader><leader> :Commands<CR>
imap jk <ESC>
nnoremap <backspace> <C-^>
cnoremap <A-BS> <c-w>
inoremap <A-BS> <c-w>
nnoremap ` '
nnoremap ' `
imap <C-s> <C-o>:w!<CR>
inoremap <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Project management
nmap <leader>pf :Files<CR>
nmap <leader>pp :source ~/.vim/sessions/
nmap <leader>ps :mksession! ~/.vim/sessions/
nmap <leader>pt :NERDTreeToggle<CR>

map \ :NERDTreeToggle<CR>

" Git/Fugitive keybindings
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gC :Git checkout
nnoremap <leader>gf :Git fetch<CR>
nnoremap <leader>gF :Git pull --rebase<CR>
nnoremap <leader>gP :Git push
nnoremap <leader>gs :Git<CR>

" Window bindings
nnoremap <leader>wh <C-w>h
nnoremap <leader>wj <C-w>j
nnoremap <leader>wk <C-w>k
nnoremap <leader>wl <C-w>l
nnoremap <leader>wo <C-w>o
nnoremap <leader>wc <C-w>c
nnoremap <leader>ws <C-w>s
nnoremap <leader>wv <C-w>v

" Buffer bindings
nmap <leader>d :BD<CR>
nmap <leader>bd :BD!<CR>
nmap <leader>bb :Buffers<CR>
nmap <leader>bn :bn!<CR>
nmap <leader>bp :bp!<CR>

nmap <leader>qq :wqa!<CR>
nmap <leader><Esc> :q!<CR>

" File based 
nmap <leader>ff :edit 
nmap <leader>fs :w!<CR>
nmap <leader>ft :NERDTreeFind<CR>
nmap <leader>feR :source ~/.vimrc<CR>
nmap <leader>fed :edit ~/.vimrc<CR>
nmap <leader>fo :edit ~/Documents/notes/backlog.md<CR>

" Searching
nnoremap <Leader>sw :Rg <C-r><C-w>
nnoremap <Leader>sg :Rg<CR>
nnoremap <Leader>sb :BLines<CR>
nnoremap <leader>/ :noh<CR>
tnoremap <Esc> <C-\><C-n>

" Scratch buffer on R command
:command! -nargs=* -complete=shellcmd R new | setlocal buftype=nofile bufhidden=hide noswapfile | r !<args>

" Plugin configuration

" FZF configuration
let $FZF_DEFAULT_COMMAND = 'rg --hidden --files'
" Files with preview
command! -bang -nargs=* -complete=dir Files 
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview('right:50%:hidden', '?'), <bang>0)
" Grep with preview
command! -bang -nargs=* Rg 
      \ call fzf#vim#grep(
      \ 'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
      \ fzf#vim#with_preview({'options': '--delimiter : --nth 4..'},'right:50%:hidden', '?'))

" LSP configuration
let g:coc_force_debug = 1
let g:coc_global_extensions = ['coc-json', 'coc-solargraph', 'coc-jest', 'coc-eslint', 'coc-tsserver', 'coc-python']
inoremap <silent><expr> <c-space> coc#refresh()
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gh <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>ac  <Plug>(coc-codeaction)
nmap <leader>qf <Plug>(coc-fix-current)
nmap <silent> <F2> <Plug>(coc-rename)
nnoremap <silent> K :call <SID>show_documentation()<CR>

autocmd CursorHold * silent call CocActionAsync('highlight')

command! -nargs=0 JestCurrent :call CocAction('runCommand', 'jest.fileTest', ['%'])
command! -nargs=0 JestSingle :call CocAction('runCommand', 'jest.singleTest')
command! -nargs=0 FilePath :!echo $(pwd)/% | pbcopy

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocActionAsync('doHover')
  endif
endfunction

" Tab now opens dirs in nerdtree
autocmd FileType nerdtree map <buffer> <tab> <CR>
let NERDTreeShowHidden = 1
let NERDTreeWinSize = 50

" Snippets - Really don't use these enough
let g:UltiSnipsExpandTrigger="<C-j>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"
let g:plantuml_executable_script='java -jar ~/plantuml.jar -tsvg'
let g:http_client_verify_ssl=0

" use python to format xml
command! FormatXML :%!python3 -c "import xml.dom.minidom, sys; print(xml.dom.minidom.parse(sys.stdin).toprettyxml())"
command! FormatJSON :%!jq

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

augroup neovim_terminal
  autocmd!
  autocmd TermOpen * setlocal nonumber
  autocmd TermOpen * startinsert
  autocmd TermOpen * nnoremap <buffer> <C-c> i<C-c>
augroup END

" Status line stuff
set statusline=%f         " Path to the file
set statusline+=%=        " Switch to the right side
set statusline+=%l        " Current line
set statusline+=/         " Separator
set statusline+=%L        " Total lines

colorscheme nord 
" Set transparency
hi Normal guibg=NONE ctermbg=NONE 
hi statusline guibg=NONE

" WSL yank support
let s:clip = '/mnt/c/Windows/System32/clip.exe'  " change this path according to your mount point
if executable(s:clip)
    augroup WSLYank
        autocmd!
        autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
    augroup END
endif
