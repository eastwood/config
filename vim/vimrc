" Install packages and configuration
call plug#begin()
Plug 'mhinz/vim-startify'
Plug 'tpope/vim-surround' " The Pope's gift to man
Plug 'jnurmine/zenburn' " Nice theme for reading
Plug 'rakr/vim-one' " Atom themes
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } " We want that tree action
Plug 'tpope/vim-fugitive', { 'on': 'Gstatus' } " Git badassery
Plug 'pangloss/vim-javascript', { 'for': 'javascript' } " Javascript support
Plug 'leafgarland/typescript-vim' " Typescript lang
Plug 'mxw/vim-jsx', { 'for': 'javascript.jsx' } " JSX support
Plug 'vim-ruby/vim-ruby' " Ruby support
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'} " Language Servers 
Plug 'scrooloose/nerdcommenter' " Comment lines
Plug '/usr/local/opt/fzf' " Searching, need to install fzf first
Plug 'junegunn/fzf.vim' " Fzf plugin to interact with cmd tool
Plug 'shime/vim-livedown'
call plug#end()

" Settings
let mapleader = " "
if has('mac')
  let g:clipboard = {'copy': {'+': 'pbcopy', '*': 'pbcopy'}, 'paste': {'+': 'pbpaste', '*': 'pbpaste'}, 'name': 'pbcopy', 'cache_enabled': 0}
endif
set clipboard+=unnamedplus
set completeopt=menu,preview,longest,noinsert
set ttyfast
set modelines=0
set history=500
set autoread
set showmatch
set splitbelow splitright
set mouse=a

if !has('nvim')
	set ttymouse=xterm2
endif

" User Interface
set colorcolumn=120
set title
set number
set lazyredraw
set signcolumn=yes
set showcmd
set hidden
set showmode
set updatetime=300

if has("gui_running")
  set guifont=Source\ Code\ Pro:h12
  set guioptions-=m " no menu
  set guioptions-=T " no toolbar
  set guioptions-=r " no scrollbar on the right
  set guioptions-=L " no scrollbar on the right
  set guioptions-=b " no scrollbar on the bottom
endif

set termguicolors
colorscheme one
set bg=dark

"General UI
highlight LineNr guibg=NONE |
highlight LineNr ctermbg=NONE |
highlight SignColumn ctermbg=NONE guibg=NONE |
highlight VertSplit guibg=NONE ctermbg=NONE |
highlight StatusLine ctermbg=white ctermbg=black

" Files and Backups
set noswapfile
set backupdir=~/tmp,/tmp
set undodir=~/.vim/.tmp,~/tmp,~/.tmp,/tmp
set wildignore=.svn,CVS,.git,*.swp,*.jpg,*.png,*.gif,*.pdf,*.bak
set suffixes+=.old
set undofile

" Text Formatting
set smartcase
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set ignorecase
set hlsearch
set nowrap

" Keybindings

" General Keybindings
map <leader><leader> :Commands<CR>
imap jk <ESC>
nnoremap <backspace> <C-^>
nnoremap ` '
nnoremap ' `
imap <C-s> <C-o>:w!<CR>
imap <C-v> <ESC>"+gP
vmap <C-c> "+y
nnoremap / /\v
inoremap <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Menu settings
autocmd CompleteDone * pclose

" Project management
nmap <leader>pf :Files<CR>
nmap <leader>pp :source ~/.vim/sessions/
nmap <leader>ps :mksession! ~/.vim/sessions/
nmap <leader>pt :NERDTreeToggle<CR>

map \ :NERDTreeToggle<CR>

" Git/Fugitive keybindings
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gC :Git checkout
nnoremap <leader>gf :Gfetch<CR>
nnoremap <leader>gF :!git pull --rebase<CR>
nnoremap <leader>gP :Gpush
nnoremap <leader>gs :Gstatus<CR>

" Window bindings
nnoremap <leader>wh <C-w>h
nnoremap <leader>wj <C-w>j
nnoremap <leader>wk <C-w>k
nnoremap <leader>wl <C-w>l
nnoremap <leader>wo <C-w>o
nnoremap <leader>wc <C-w>c
" nnoremap <leader>ws <C-w>s
nnoremap <leader>wv <C-w>v

" Buffer bindings
nmap <leader>d :bp<bar>sp<bar>bn<bar>bd<CR>
nmap <leader>bd :bd!<CR>
nmap <leader>bb :Buffers<CR>
nmap <leader>bn :bn!<CR>
nmap <leader>bp :bp!<CR>

" To avoid generating too much entropy
nmap <leader>qq :wqa!<CR>
nmap <leader><Esc> :q!<CR>
nmap <leader>/ :noh<CR>

" File based 
nmap <leader>ff :edit
nmap <leader>fs :w!<CR>
nmap <leader>ft :NERDTreeFind<CR>
nmap <leader>feR :source ~/.vimrc<CR>
nmap <leader>fed :edit ~/.vimrc<CR>
nmap <leader>fo :edit ~/Dropbox/notes/gth.md<CR>

" Searching
nnoremap <Leader>sw :Rg <C-r><C-w>
nnoremap <Leader>sg :Rg<CR>
nnoremap <Leader>sb :BLines<CR>
tnoremap <Esc> <C-\><C-n>

" FZF configuration
let $FZF_DEFAULT_COMMAND = 'rg --hidden --files'
" Files with preview
command! -bang -nargs=* -complete=dir Files 
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview('right:50%:hidden', '?'), <bang>0)
" Grep with preview
command! -bang -nargs=* Rg 
      \ call fzf#vim#grep(
      \ 'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
      \ fzf#vim#with_preview({'options': '--delimiter : --nth 4..'},'right:50%:hidden', '?'))

" LSP configuration
let g:coc_force_debug = 1
inoremap <silent><expr> <c-space> coc#refresh()
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gh <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> <F2> <Plug>(coc-rename)
nmap <leader>qf <Plug>(coc-fix-current)
nnoremap <silent> K :call <SID>show_documentation()<CR>
autocmd CursorHold * silent call CocActionAsync('highlight')

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocActionAsync('doHover')
  endif
endfunction

" Tab now opens dirs in nerdtree
autocmd FileType nerdtree map <buffer> <tab> <CR>
let NERDTreeShowHidden = 1

" Snippets - Really don't use these enough
let g:UltiSnipsExpandTrigger="<C-j>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"

let g:startify_session_dir = "~/.vim/sessions"
